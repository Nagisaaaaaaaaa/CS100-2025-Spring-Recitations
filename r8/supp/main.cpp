/*

《编译器大小姐想帮我化简～天才们的编程头脑战～》

*/

#include "ARIA/Tup.h"

using namespace ARIA;

int main() {
  // 我们想用 C++ 计算叉乘：
  //   a = (x, 0, 0),
  //   b = (0, y, 0),
  //   c = a × b.
  // 通过一些简单的计算，我们化简得到 c = (0, 0, xy)。
  // 但手动化简还是太累了呀，我们能不能请编译器帮我们化简呢？
  double x, y;
  std::cin >> x >> y;

  // 编译器：“在我看来，x，y，和 0，都是 double，是完全一样的东西呀。”
  // 编译器：“所以就算你知道 a 和 b 中分别有两个 0，我也不知道呀。”
  // 编译器：“要不，我们约定一个记号，用某个特定‘类型’来表示 0。”
  //
  // 这里的 C<0.0> 就是我们和编译器约定的那个类型，_0 就是一个编译时的 0。
  C<0.0> _0;

  // 我是一个三维向量 (x, 0, 0)，我在编译的时候就知道我有两个 0。
  Tec a(x, _0, _0);
  // 我也是一个三维向量 (0, y, 0)，我也在编译的时候就知道我有两个 0。
  Tec b(_0, y, _0);

  // 我们来做个叉乘：
  //   [0] = a[1] * b[2] - a[2] * b[1];
  //   [1] = a[2] * b[0] - a[0] * b[2];
  //   [2] = a[0] * b[1] - a[1] * b[0];

  // 编译器大小姐想帮我化简：
  //   [0] =   0  *   0  -   0  * b[1];
  //   [1] =   0  *   0  - a[0] *   0;
  //   [2] = a[0] * b[1] -   0  *   0;

  // 最终得到：
  //   [0] = 0;
  //   [1] = 0;
  //   [2] = a[0] * b[1];
  Tec c = Cross(a, b);

  // 编译器大小姐：“才不会告诉你 [0] 和 [1] 一定是 0 呢~”
  std::cout << "a: " << a << std::endl;
  std::cout << "b: " << b << std::endl;
  std::cout << "c: " << c << std::endl;

  return 0;
}
