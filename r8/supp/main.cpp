/*

《编译器大小姐想帮我化简～天才们的编程头脑战～》

*/

#include "ARIA/Tup.h"

using namespace ARIA;

int main() {
  // 我们想用 C++ 计算叉乘：
  //   a = (x, 0, 0),
  //   b = (0, y, 0),
  //   c = a × b.
  // 通过一些简单的计算，我们化简得到 c = (0, 0, xy)。
  // 但手动化简还是太累了呀，我们能不能请编译器帮我们化简呢？
  double x, y;
  std::cin >> x >> y;

  // 编译器：“在我看来，x，y，和 0，都是 double，是完全一样的东西呀。”
  // 编译器：“所以就算你知道 a 和 b 中分别有两个 0，我也不知道呀。”
  // 编译器：“要不，我们约定一个记号，用某个特定‘类型’来表示 0。”
  //
  // 这里的 C<0.0> 就是我们和编译器约定的那个类型，其中 C 的意思是 constant。
  // 这个类型的变量 _0，就是我们和编译器约定的记号。
  C<0.0> _0;

  // 我们把约定的记号悄悄塞进向量 a 和 b。
  Tec a(x, _0, _0);
  Tec b(_0, y, _0);

  // 这样一来，编译器就能帮我们自动化简了呢。
  Tec c = Cross(a, b);

  // 编译器首先写出了叉乘的数学公式：
  //   (a1 * b2 - a2 * b1,
  //    a2 * b0 - a0 * b2,
  //    a0 * b1 - a1 * b0).
  //
  // 通过约定记号，她发现两个向量里面有不少个 0：
  //   ( 0 *  0 -  0 * b1,
  //     0 *  0 - a0 *  0,
  //    a0 * b1 -  0 *  0).
  //
  // 能消掉很多东西呢：
  //   (0,
  //    0,
  //    a0 * b1).

  // 编译器：“化简完了，还不快感谢我~”
  std::cout << "a: " << a << std::endl;
  std::cout << "b: " << b << std::endl;
  std::cout << "c: " << c << std::endl;

  return 0;
}
